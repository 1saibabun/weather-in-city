{"version":3,"sources":["mockWeatherData.js","components/WeatherForecast.js","App.js","reportWebVitals.js","index.js"],"names":["mockWeatherData","city","forecast","date","main","temp_min","temp_max","pressure","humidity","WeatherForecast","setCity","useState","setForecast","loading","setLoading","error","setError","searched","setSearched","React","createElement","className","type","value","onChange","e","inputValue","target","placeholder","onClick","fetchWeather","setTimeout","mockCity","toLowerCase","userInput","includes","disabled","length","map","day","index","key","Date","toLocaleDateString","colSpan","toFixed","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.abfdb524.chunk.js","sourcesContent":["export const mockWeatherData = {\r\n    city: \"Visakhapatnam\",\r\n    forecast: [\r\n        {\r\n            date: \"2024-10-09 12:00:00\",\r\n            main: {\r\n                temp_min: 25.5,\r\n                temp_max: 30.2,\r\n                pressure: 1012,\r\n                humidity: 78\r\n            }\r\n        },\r\n        {\r\n            date: \"2024-10-10 12:00:00\",\r\n            main: {\r\n                temp_min: 26.0,\r\n                temp_max: 31.1,\r\n                pressure: 1011,\r\n                humidity: 75\r\n            }\r\n        },\r\n        {\r\n            date: \"2024-10-11 12:00:00\",\r\n            main: {\r\n                temp_min: 27.0,\r\n                temp_max: 32.0,\r\n                pressure: 1010,\r\n                humidity: 72\r\n            }\r\n        },\r\n        {\r\n            date: \"2024-10-12 12:00:00\",\r\n            main: {\r\n                temp_min: 26.5,\r\n                temp_max: 33.1,\r\n                pressure: 1009,\r\n                humidity: 70\r\n            }\r\n        },\r\n        {\r\n            date: \"2024-10-13 12:00:00\",\r\n            main: {\r\n                temp_min: 28.0,\r\n                temp_max: 34.0,\r\n                pressure: 1008,\r\n                humidity: 68\r\n            }\r\n        }\r\n    ]\r\n};\r\n","import React, { useState } from 'react';\r\nimport { mockWeatherData } from '../mockWeatherData';\r\nimport './WeatherForecast.css';\r\n\r\nconst WeatherForecast = () => {\r\n    const [city, setCity] = useState('');\r\n    const [forecast, setForecast] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [searched, setSearched] = useState(false);\r\n\r\n    const fetchWeather = () => {\r\n        setLoading(true);\r\n        setError('');\r\n        setSearched(true);\r\n\r\n        setTimeout(() => {\r\n            const mockCity = mockWeatherData.city.toLowerCase();\r\n            const userInput = city.toLowerCase();\r\n\r\n            if (mockCity.includes(userInput)) {\r\n                setForecast(mockWeatherData.forecast);\r\n                setError('');\r\n            } else {\r\n                setForecast([]);\r\n                setError('City not found. Please try again.');\r\n            }\r\n            setLoading(false);\r\n        }, 1000);\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        const inputValue = e.target.value;\r\n        setCity(inputValue);\r\n\r\n        if (inputValue === '') {\r\n            setForecast([]);\r\n            setSearched(false);\r\n            setError('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"weather-container\">\r\n            <h1>Weather in your city</h1>\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={city}\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"Enter city name\"\r\n                />\r\n                <button \r\n                    onClick={fetchWeather} \r\n                    disabled={city === ''}\r\n                >\r\n                    Search\r\n                </button>\r\n                {loading && <div className=\"loader\"></div>}\r\n            </div>\r\n\r\n            {error && <p className=\"error\">{error}</p>} \r\n\r\n            <div className=\"forecast\">\r\n                {!loading && searched && forecast.length === 0 && !error && (\r\n                    <p>No data available</p>  \r\n                )}\r\n                {!loading && forecast.length > 0 && (\r\n                    forecast.map((day, index) => (\r\n                        <div key={index} className=\"forecast-day\">\r\n                            <h3>Date: {new Date(day.date).toLocaleDateString()}</h3>\r\n                            <table>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th colSpan=\"2\">Temperature</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>Min</td>\r\n                                        <td>Max</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>{day.main.temp_min.toFixed(2)}°C</td>\r\n                                        <td>{day.main.temp_max.toFixed(2)}°C</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td colSpan=\"2\">Pressure: {day.main.pressure} hPa</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td colSpan=\"2\">Humidity: {day.main.humidity}%</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    ))\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeatherForecast;\r\n","import React from 'react';\nimport WeatherForecast from './components/WeatherForecast';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <WeatherForecast />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}